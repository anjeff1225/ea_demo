{"uid":"f5e5cbacb8f73d68","name":"Test Upload file to S3 Bucket success","fullName":"test_cases.ui.test_upload_file.TestUploadFile#test_upload_file","historyId":"ca4b70ffd1219401a9b3c0c64894c127","time":{"start":1661715219432,"stop":1661715254694,"duration":35262},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=104.0.5112.102)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x004878B3+2193587]\n\tOrdinal0 [0x00420681+1771137]\n\tOrdinal0 [0x00334070+802928]\n\tOrdinal0 [0x00363533+996659]\n\tOrdinal0 [0x00359223+954915]\n\tOrdinal0 [0x0037D7AC+1103788]\n\tOrdinal0 [0x00358C04+953348]\n\tOrdinal0 [0x0037D9C4+1104324]\n\tOrdinal0 [0x0038DAE2+1170146]\n\tOrdinal0 [0x0037D5C6+1103302]\n\tOrdinal0 [0x003577E0+948192]\n\tOrdinal0 [0x003586E6+952038]\n\tGetHandleVerifier [0x00730CB2+2738370]\n\tGetHandleVerifier [0x007221B8+2678216]\n\tGetHandleVerifier [0x005117AA+512954]\n\tGetHandleVerifier [0x00510856+509030]\n\tOrdinal0 [0x0042743B+1799227]\n\tOrdinal0 [0x0042BB68+1817448]\n\tOrdinal0 [0x0042BC55+1817685]\n\tOrdinal0 [0x00435230+1856048]\n\tBaseThreadInitThunk [0x766BFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77E17A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77E17A6E+238]","statusTrace":"self = <test_upload_file.TestUploadFile object at 0x0000016B519FFE50>\n\n    @allure.title('Test Upload file to S3 Bucket success')\n    def test_upload_file(self):\n        # don't want to share my AWS account password, put a fake here\n>       self.loginpage.login_method('jeff.sbian@gmail.com', 'Asdf123$%')\n\ntest_cases\\ui\\test_upload_file.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsupport\\ui\\page_object\\awsLoginPO.py:68: in login_method\n    self.input_text(elementsMap['password_input_field'], pwd)\nsupport\\ui\\utils.py:46: in input_text\n    self.click_element(value)\nsupport\\ui\\utils.py:50: in click_element\n    self.find_element(value).click()\nC:\\Users\\jeffs\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\remote\\webelement.py:88: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\jeffs\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\remote\\webelement.py:396: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\jeffs\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:434: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016B5198AD60>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E17A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E17A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=104.0.5112.102)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x004878B3+2193587]\nE       \tOrdinal0 [0x00420681+1771137]\nE       \tOrdinal0 [0x00334070+802928]\nE       \tOrdinal0 [0x00363533+996659]\nE       \tOrdinal0 [0x00359223+954915]\nE       \tOrdinal0 [0x0037D7AC+1103788]\nE       \tOrdinal0 [0x00358C04+953348]\nE       \tOrdinal0 [0x0037D9C4+1104324]\nE       \tOrdinal0 [0x0038DAE2+1170146]\nE       \tOrdinal0 [0x0037D5C6+1103302]\nE       \tOrdinal0 [0x003577E0+948192]\nE       \tOrdinal0 [0x003586E6+952038]\nE       \tGetHandleVerifier [0x00730CB2+2738370]\nE       \tGetHandleVerifier [0x007221B8+2678216]\nE       \tGetHandleVerifier [0x005117AA+512954]\nE       \tGetHandleVerifier [0x00510856+509030]\nE       \tOrdinal0 [0x0042743B+1799227]\nE       \tOrdinal0 [0x0042BB68+1817448]\nE       \tOrdinal0 [0x0042BC55+1817685]\nE       \tOrdinal0 [0x00435230+1856048]\nE       \tBaseThreadInitThunk [0x766BFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E17A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E17A6E+238]\n\nC:\\Users\\jeffs\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pre_setup","time":{"start":1661715216035,"stop":1661715216035,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"driver","time":{"start":1661715216035,"stop":1661715217434,"duration":1399},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"setup_class","time":{"start":1661715217434,"stop":1661715219431,"duration":1997},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=104.0.5112.102)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x004878B3+2193587]\n\tOrdinal0 [0x00420681+1771137]\n\tOrdinal0 [0x00334070+802928]\n\tOrdinal0 [0x00363533+996659]\n\tOrdinal0 [0x00359223+954915]\n\tOrdinal0 [0x0037D7AC+1103788]\n\tOrdinal0 [0x00358C04+953348]\n\tOrdinal0 [0x0037D9C4+1104324]\n\tOrdinal0 [0x0038DAE2+1170146]\n\tOrdinal0 [0x0037D5C6+1103302]\n\tOrdinal0 [0x003577E0+948192]\n\tOrdinal0 [0x003586E6+952038]\n\tGetHandleVerifier [0x00730CB2+2738370]\n\tGetHandleVerifier [0x007221B8+2678216]\n\tGetHandleVerifier [0x005117AA+512954]\n\tGetHandleVerifier [0x00510856+509030]\n\tOrdinal0 [0x0042743B+1799227]\n\tOrdinal0 [0x0042BB68+1817448]\n\tOrdinal0 [0x0042BC55+1817685]\n\tOrdinal0 [0x00435230+1856048]\n\tBaseThreadInitThunk [0x766BFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77E17A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77E17A6E+238]","statusTrace":"self = <test_upload_file.TestUploadFile object at 0x0000016B519FFE50>\n\n    @allure.title('Test Upload file to S3 Bucket success')\n    def test_upload_file(self):\n        # don't want to share my AWS account password, put a fake here\n>       self.loginpage.login_method('jeff.sbian@gmail.com', 'Asdf123$%')\n\ntest_cases\\ui\\test_upload_file.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsupport\\ui\\page_object\\awsLoginPO.py:68: in login_method\n    self.input_text(elementsMap['password_input_field'], pwd)\nsupport\\ui\\utils.py:46: in input_text\n    self.click_element(value)\nsupport\\ui\\utils.py:50: in click_element\n    self.find_element(value).click()\nC:\\Users\\jeffs\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\remote\\webelement.py:88: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\jeffs\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\remote\\webelement.py:396: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\jeffs\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:434: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016B5198AD60>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E17A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E17A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=104.0.5112.102)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x004878B3+2193587]\nE       \tOrdinal0 [0x00420681+1771137]\nE       \tOrdinal0 [0x00334070+802928]\nE       \tOrdinal0 [0x00363533+996659]\nE       \tOrdinal0 [0x00359223+954915]\nE       \tOrdinal0 [0x0037D7AC+1103788]\nE       \tOrdinal0 [0x00358C04+953348]\nE       \tOrdinal0 [0x0037D9C4+1104324]\nE       \tOrdinal0 [0x0038DAE2+1170146]\nE       \tOrdinal0 [0x0037D5C6+1103302]\nE       \tOrdinal0 [0x003577E0+948192]\nE       \tOrdinal0 [0x003586E6+952038]\nE       \tGetHandleVerifier [0x00730CB2+2738370]\nE       \tGetHandleVerifier [0x007221B8+2678216]\nE       \tGetHandleVerifier [0x005117AA+512954]\nE       \tGetHandleVerifier [0x00510856+509030]\nE       \tOrdinal0 [0x0042743B+1799227]\nE       \tOrdinal0 [0x0042BB68+1817448]\nE       \tOrdinal0 [0x0042BC55+1817685]\nE       \tOrdinal0 [0x00435230+1856048]\nE       \tBaseThreadInitThunk [0x766BFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E17A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E17A6E+238]\n\nC:\\Users\\jeffs\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: ElementNotInteractableException","steps":[{"name":"Click Log back in button","time":{"start":1661715220579,"stop":1661715220637,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"Enter login email: jeff.sbian@gmail.com","time":{"start":1661715220637,"stop":1661715222194,"duration":1557},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"Enter captcha","time":{"start":1661715222194,"stop":1661715224623,"duration":2429},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"Enter password: Asdf123$%","time":{"start":1661715224623,"stop":1661715254664,"duration":30041},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=104.0.5112.102)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x004878B3+2193587]\n\tOrdinal0 [0x00420681+1771137]\n\tOrdinal0 [0x00334070+802928]\n\tOrdinal0 [0x00363533+996659]\n\tOrdinal0 [0x00359223+954915]\n\tOrdinal0 [0x0037D7AC+1103788]\n\tOrdinal0 [0x00358C04+953348]\n\tOrdinal0 [0x0037D9C4+1104324]\n\tOrdinal0 [0x0038DAE2+1170146]\n\tOrdinal0 [0x0037D5C6+1103302]\n\tOrdinal0 [0x003577E0+948192]\n\tOrdinal0 [0x003586E6+952038]\n\tGetHandleVerifier [0x00730CB2+2738370]\n\tGetHandleVerifier [0x007221B8+2678216]\n\tGetHandleVerifier [0x005117AA+512954]\n\tGetHandleVerifier [0x00510856+509030]\n\tOrdinal0 [0x0042743B+1799227]\n\tOrdinal0 [0x0042BB68+1817448]\n\tOrdinal0 [0x0042BC55+1817685]\n\tOrdinal0 [0x00435230+1856048]\n\tBaseThreadInitThunk [0x766BFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77E17A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77E17A6E+238]\n\n","statusTrace":"  File \"D:\\Python\\ea_demo\\support\\ui\\page_object\\awsLoginPO.py\", line 68, in login_method\n    self.input_text(elementsMap['password_input_field'], pwd)\n  File \"D:\\Python\\ea_demo\\support\\ui\\utils.py\", line 46, in input_text\n    self.click_element(value)\n  File \"D:\\Python\\ea_demo\\support\\ui\\utils.py\", line 50, in click_element\n    self.find_element(value).click()\n  File \"C:\\Users\\jeffs\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 88, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\jeffs\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 396, in _execute\n    return self._parent.execute(command, params)\n  File \"C:\\Users\\jeffs\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 434, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\jeffs\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 243, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true},{"name":"Capture failure screenshot...","time":{"start":1661715255035,"stop":1661715255165,"duration":130},"status":"passed","steps":[],"attachments":[{"uid":"ca7985354bc077db","name":"fail_screen_shot","source":"ca7985354bc077db.png","type":"image/png","size":114970}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"stepsCount":5,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1661715255166,"stop":1661715257292,"duration":2126},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Login a to AWS console and upload file (UI)"},{"name":"parentSuite","value":"test_cases.ui"},{"name":"suite","value":"test_upload_file"},{"name":"subSuite","value":"TestUploadFile"},{"name":"host","value":"DESKTOP-G4KRJDO"},{"name":"thread","value":"19504-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.ui.test_upload_file"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"f5e5cbacb8f73d68.json","parameterValues":[]}